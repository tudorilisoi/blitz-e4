// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

// --------------------------------------

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastVisitAt    DateTime?
  fullName       String?
  email          String    @unique
  hashedPassword String?
  phone          String?   @db.VarChar(30)
  banned         Boolean   @default(false)
  activationKey  String?   @db.VarChar(255)
  role           UserRoles @default(USER)

  tokens   Token[]
  sessions Session[]
  Post     Post[]
  Image    Image[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
enum TokenType {
  RESET_PASSWORD
}

enum UserRoles {
  SUPERADMIN
  USER
  USER_UNVERIFIED
}

enum PostStatuses {
  ACTIVE
  EXPIRED_WARNING_SENT
  EXPIRED
  PROMOTED
}

enum currencies {
  EUR
  RON
}

// model User {
//   id                  Int       @id @default(autoincrement())
//   email               String    @unique
//   fullName            String    @db.VarChar(255)
//   phone               String?   @db.VarChar(30)
//   hashedPassword      String    @default("") @db.VarChar(255)
//   salt                String    @default("") @db.VarChar(255)
//   activationKey       String?   @db.VarChar(255)
//   role                UserRoles
//   banned              Boolean   @default(false)
//   Post                Post[]
//   resetToken          String?   @db.VarChar(255)
//   resetTokenExpiresAt DateTime?
//   lastVisitAt         DateTime?
//   createdAt           DateTime  @default(now())
//   updatedAt           DateTime  @default(now()) @updatedAt
// }

enum CronStatuses {
  pending // new record
  success //NOOP
  fail //NOOP
}

model CronMail {
  id            Int          @id @default(autoincrement())
  lastExecuted  DateTime?
  status        CronStatuses
  // max retries = 5
  retries       Int          @default(0)
  lastErrorJson String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
}

model Post {
  id         Int          @id @default(autoincrement())
  title      String       @default("") @db.VarChar(255)
  slug       String       @default("") @db.VarChar(255)
  body       String       @default("")
  status     PostStatuses
  price      Int          @default(0)
  currency   currencies
  phone      String?      @db.VarChar(30)
  images     Image[]
  category   Category     @relation(fields: [categoryId], references: [id])
  categoryId Int
  author     User         @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  expiresAt  DateTime     @default(now()) @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  fileName  String
  width     Int      @default(0)
  height    Int      @default(0)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  title       String   @default("") @db.VarChar(255)
  slug        String   @unique @db.VarChar(255)
  description String   @default("")
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}
